{"meta":{"title":"D","subtitle":null,"description":null,"author":"D","url":"http://zydi.github.io"},"pages":[{"title":"","date":"2018-07-21T14:34:12.091Z","updated":"2018-07-21T14:34:12.091Z","comments":true,"path":"about/index.html","permalink":"http://zydi.github.io/about/index.html","excerpt":"","text":"QAQ"}],"posts":[{"title":"《算法导论》第八章 线性时间排序","slug":"算法导论 第八章 线性时间排序","date":"2018-08-11T16:00:00.000Z","updated":"2018-08-12T05:20:03.785Z","comments":true,"path":"2018/08/12/算法导论 第八章 线性时间排序/","link":"","permalink":"http://zydi.github.io/2018/08/12/算法导论 第八章 线性时间排序/","excerpt":"《算法导论》第八章 线性时间排序 在排序的最终结果中，各元素的次序依赖于它们之间的比较。这类排序算法称为比较排序。","text":"《算法导论》第八章 线性时间排序 在排序的最终结果中，各元素的次序依赖于它们之间的比较。这类排序算法称为比较排序。 8.1 排序算法的下界 决策树模型 比较排序可以被抽象为一棵决策树。决策树是一颗完全二叉树，它可以表示在给定输入规模情况下，某一特定排序算法对所有元素的比较操作。 对一个正确的比较排序算法来说，n个元素的n！种可能的排列都应该出现在决策树的叶结点上。而且每一个叶结点都必须是可以从根结点经由某条路径到达的，该路径对应于比较排序的一次实际执行过程（我们称这种叶结点为“可达的”）。 最坏情况的下界 在决策树中，从根结点到任意一个可达叶结点之间最长简单路径的长度，表示的是对应的排序算法中最坏情况下的比较次数。因此，一个比较排序算法中的最坏情况比较次数就等于其决策树的高度。同时，当决策树中每种排列都是以可达的叶结点的形式出现时，该决策树高度的下界也就是比较排序算法运行时间的下界。 定理8.1 在最坏情况下，任何比较排序算法都需要做Ω(nlgn)次比较。 推论8.2 堆排序和归并排序都是渐近最优的比较排序算法。 8.2 计数排序 计数排序假设n个输入元素中的每一个都是在0到k区间内的一个整数，其中k为某个整数。当k=O(n)时，排序的运行时间为Θ(n)。 基本思想：对每一个输入元素x，确定小于x的元素个数。利用这一信息，就可以直接把x放到它在输出数组中的位置上了。在技术排序算法的代码中，假设输入是一个数组A[1…n]，A.length=n。我们还需要两个数组：B[1…n]存放排序的输出，C[0…k]提供临时存储空间。 1COUNTING-SORT(A,B,k) 123456789101112let C[0..k] be a new arrayfor i = 0 to k C[i] = 0for j = 1 to A.length C[A[j]] = C[A[j]] + 1//C[i] now contains the number of elements equal to i.for i = 1 to k C[i] = C[i] + C[i-1]//C[i] now contains the number of elements less than or equal to i.for j = A.length downto 1 B[C[A[j]]] = A[j] C[A[j]] = C[A[j]] - 1 图8-2图示了计数排序的运行过程。在第23行for循环的初始化操作之后，数组C的值全被置为0；第45行的for循环遍历每一个输入元素。如果一个输入元素的值为i，就将C[i]值加1。于是，在第5行执行完后，C[i]保存的就是等于i的元素的个数，其中i=0，1，…，k。第7~8行通过加总计算确定对每一个i=0，1，…，k，有多少输入元素是小于或等于i的。 最后，在第10~12行的for循环部分，把每个元素A[j]放到它在输出数组B中的正确位置上。如果所有n个元素都是互异的，那么当第一次执行第10行时，对每一个A[j]值来说，C[A[j]]就是A[j]在输出数组中的最终正确位置。 计数排序的时间代价：第23行的for循环所花时间为Θ(k)，第45行的for循环所花时间为Θ(n)，第78行的for循环所花时间为Θ(k)，第1012行的for循环所花时间为Θ(n)。这样，总的时间代价就是Θ(k+n)。在实际工作中，当k=O(n)时，我们一般会采用技术排序，这时的运行时间为Θ(n)。计数排序是稳定的：具有相同值的元素在输出数组中的相对次序与它们在输入数组中的相对次序相同。 8.3 基数排序 基数排序是一种用在卡片排序机上的算法，现在你只能在博物馆找到这种卡片排序机了。一张卡片有80列，在每一列上机器可以选择在12个为之中的任一处穿孔。通过机械操作，我们可以对排序机“编程”来检查每个卡片中的给定列，然后根据穿孔的位置将它们分别放入12个容器中。操作员就可以逐个容器地来收集卡片，其中第一个位置穿孔的卡片在最上面，其次是第二个位置穿孔的卡片，以此类推。计数排序是先按最低有效位进行排序来解决卡片排序问题的。然后算法将所有卡片合并成一叠，其中0号容器中的卡片都在1号容器中的卡片之前，而1号容器中的卡片又在2号容器中的卡片之前，以此类推。之后，用同样的方法按次低有效位对所有的卡片进行排序，并把拍好的卡片再次合并成一叠。充父这一过程，直到对所有的d位数字都进行了排序。此时，所有卡片已按d位数都进行了排序。此时，所有卡片已按d位数完全排好序。所以，对这一叠卡片的排序仅需要进行d轮。图8-3说明了“一叠”7张2位数卡片的基数排序过程。 假设n个d位的元素存放在数组A中，其中第1位是最低位，第d位是最高位。 1RADIX-SORT(A,d) 12for i = 1 to d use a stable sort to sort array A on digit i 引理8.3 给定n个d位数，其中每一个位数有k个可能的取值。如果RADIX-SORT使用的稳定排序方法耗时Θ(n+k)，那么它就可以在Θ(d(n+k))时间内将这些数排好序。 引理8.4 给定一个b位数和任何正整数r≤b，如果RADIX-SORT使用的稳定排序算法对数据取值空间是0到k的输入进行排序耗时Θ(n+k)，那么它就可以在Θ((b/r)(n+2r))时间内将这些数排好序。 8.4 桶排序 桶排序假设输入数据服从均匀分布，平均情况下它的时间代价为O(n)。桶排序将[0,1)区间划分为n个相同大小的子区间，或称为桶。然后，将n个输入数分别放到各个桶中。因为输入数据是均匀的、独立地分布在[0,1)区间上，所以一般不会出现很多数落在同一个桶中的情况。为了得到输出结果，我们先对每个桶中的数进行排序，然后遍历每个桶，按照次序把每个桶中的元素列出来即可。 假设输入是一个包含n个元素的数组A，且每个元素A[i]满足0≤A[i]＜1.此外，算法还需要一个临时数组B[0…n-1]来存放链表(即桶),并假设存在一种用于维护这些链表的机制。 1BUCKET-SORT(A) 123456789n = A.lengthlet B[0..n-1] be a new arrayfor i = 0 to n - 1 make B[i] an empty listfor i = 1 to n insert A[i] into list B[⌊nA[i]⌋]for i = 0 to n - 1 sort list B[i] with insertion sortconcatenate the lists B[0],B[1],…,B[n-1] together in order 图8-4显示了在一个包含10个元素的输入数组上的桶排序过程。","categories":[{"name":"算法","slug":"算法","permalink":"http://zydi.github.io/categories/算法/"}],"tags":[{"name":"算法导论","slug":"算法导论","permalink":"http://zydi.github.io/tags/算法导论/"}]},{"title":"NG深度学习笔记 01 第一周","slug":"DL_04CNN_week1","date":"2018-07-27T16:00:00.000Z","updated":"2018-07-28T04:05:56.520Z","comments":true,"path":"2018/07/28/DL_04CNN_week1/","link":"","permalink":"http://zydi.github.io/2018/07/28/DL_04CNN_week1/","excerpt":"01.神经网络和深度学习 第一周 深度学习概论","text":"01.神经网络和深度学习 第一周 深度学习概论 什么是神经网络？ 单神经元网络 我们把房屋的面积作为神经网络的输入(我们称之为x)，通过一个节点(一个小圆圈)，最终我们输出了价格(我们用y表示)。这个小圆圈就是一个单独的神经元。 从趋近于零开始，然后变成一条直线。这个函数被称作ReLU激活函数，它的全称是Rectified Linear Unit。rectify可以理解成max(0,x)。 #### 多神经元网络 在图上每一个画的小圆圈都可以是 ReLU 的一部分。在这个情景里，家庭人口、步行化程度以及学校的质量都能帮助你预测房屋的价格。以此为例，𝑥 是所有的这四个输入，𝑦 是你尝试预测的价格，把这些单个的神经元叠加在一起，我们就有了一个稍微大一点的神经网络。 #### 神经网络 神经网络给予了足够多的关于𝑥和𝑦的数据，给予了足够的训练样本有关𝑥和𝑦。神经网络非常擅长计算从𝑥到𝑦的精准映射函数。","categories":[{"name":"深度学习","slug":"深度学习","permalink":"http://zydi.github.io/categories/深度学习/"}],"tags":[{"name":"深度学习","slug":"深度学习","permalink":"http://zydi.github.io/tags/深度学习/"}]},{"title":"NG深度学习笔记 01 第一周","slug":"深度学习 NG笔记 01第一周","date":"2018-07-27T16:00:00.000Z","updated":"2018-07-28T04:05:56.520Z","comments":true,"path":"2018/07/28/深度学习 NG笔记 01第一周/","link":"","permalink":"http://zydi.github.io/2018/07/28/深度学习 NG笔记 01第一周/","excerpt":"01.神经网络和深度学习 第一周 深度学习概论","text":"01.神经网络和深度学习 第一周 深度学习概论 什么是神经网络？ 单神经元网络 我们把房屋的面积作为神经网络的输入(我们称之为x)，通过一个节点(一个小圆圈)，最终我们输出了价格(我们用y表示)。这个小圆圈就是一个单独的神经元。 从趋近于零开始，然后变成一条直线。这个函数被称作ReLU激活函数，它的全称是Rectified Linear Unit。rectify可以理解成max(0,x)。 #### 多神经元网络 在图上每一个画的小圆圈都可以是 ReLU 的一部分。在这个情景里，家庭人口、步行化程度以及学校的质量都能帮助你预测房屋的价格。以此为例，𝑥 是所有的这四个输入，𝑦 是你尝试预测的价格，把这些单个的神经元叠加在一起，我们就有了一个稍微大一点的神经网络。 #### 神经网络 神经网络给予了足够多的关于𝑥和𝑦的数据，给予了足够的训练样本有关𝑥和𝑦。神经网络非常擅长计算从𝑥到𝑦的精准映射函数。","categories":[{"name":"深度学习","slug":"深度学习","permalink":"http://zydi.github.io/categories/深度学习/"}],"tags":[{"name":"深度学习","slug":"深度学习","permalink":"http://zydi.github.io/tags/深度学习/"}]},{"title":"《算法导论》第七章 快速排序","slug":"算法导论 第七章 快速排序","date":"2018-07-27T16:00:00.000Z","updated":"2018-08-05T07:40:36.796Z","comments":true,"path":"2018/07/28/算法导论 第七章 快速排序/","link":"","permalink":"http://zydi.github.io/2018/07/28/算法导论 第七章 快速排序/","excerpt":"《算法导论》第七章 快速排序 快速排序通常是实际排序应用中最好的选择。","text":"《算法导论》第七章 快速排序 快速排序通常是实际排序应用中最好的选择。 快速排序的描述 对一个典型的子数组A[p…r]进行快速排序的三步分治过程： 分解：数组A[p…r]被划分为两个（可能为空）的子数组A[p…q-1]和A[q+1…r]，使得A[p…q-1]中的每一个元素都小于等于A[q]，而A[q]也小于等于A[q+1…r]中的每个元素。其中，计算下标q也是划分过程的一部分。 解决：通过递归调用快速排序，对子数组A[p…q-1]和A[q+1…r]进行排序。 合并：因为子数组都是原址排序的，所以不需要合并操作：数组A[p…r]已经有序。 下面的程序实现快速排序： 1QUICKSORT(A,p,r) 1234if p &lt; r q = PARTITION(A,p,r) QUICKSORT(A,p,q-1) QUICKSORT(A,q+1,r) 为了排序一个数组A的全部元素，初始调用是QUICKSORT(A,1,A.length)。 数组的划分 算法的关键部分是PARTITION过程，它实现了对子数组A[p…r]的原址排序。 1PARTITION(A,p,r) 12345678x = A[r]i = p - 1for j = p to r - 1 if A[j] ≤ x i = i + 1 exchange A[i] with A[j]exchange A[i+1] with A[r]return i + 1 图7-1显示了PARTITION如何在一个包含8个元素的数组上进行操作的过程。PARTITION总是选择一个x=A[r]作为主元，并围绕它来划分子数组A[p…r. 快速排序的性能 快速排序的运行时间依赖于划分是否平衡，而平衡与否又依赖于用于划分的元素。如果划分是平衡的，那么快速排序算法性能与归并排序一样。如果划分是不平衡的，那么快速排序的性能就接近于插入排序了。 最坏情况划分 当划分产生的两个子问题分别包含了n-1个元素和0个元素时，快速排序的最坏情况发生了。假设算法的每一次递归调用中都出现这种不平衡划分，划分操作的时间复杂度是Θ(n)。由于对一个大小为0的数组进行递归调用会直接返回，因此T(0)=Θ(1). 于是算法运行时间的递归式可以表示为： T(n)=T(n-1)+T(0)+Θ(n)=T(n-1)+Θ(n) 解为T(n)=Θ(n²)。 最好情况划分 在可能的最平衡的划分中，PARTITION得到的两个子问题，其中一个的规模为⌊n/2⌋，另一个为⌈n/2⌉-1。这种情况下，快速排序的性能非常好。此时，算法隐形时间的递归式为： T(n)=2T(n/2)+Θ(n) 在上式中，忽略了一些余项以及减1操作的影响，解为T(n)=Θ(nlgn)。 平衡划分 快速排序的平均运行时间更接近于其最好情况，而非最坏情况。 例如，假设划分算法总是产生9：1的划分，此时，得到快速排序时间复杂度的递归式为： T(n)=T(9n/10)+T(n/10)+cn 这里，显式地写出了Θ(n)项中所隐含的常数c。图7-4显示了这一递归调用所对应的递归树。 注意，书中每一层的代价都是cn，直到在深度log_n10 n=Θ(lgn)处达到递归的边界条件时为止，之后每层代价至多为cn。递归在深度为log_10/9 n =Θ(lgn)处终止。因此，快速排序的总代价为O(nlgn)。 对于平均情况的直观观察 在平均情况下，PARTITION所产生的划分同时混合有“好”和“差”的划分。此时，在与PARTITION平均情况执行过程所对应的递归树中，好和差的划分是随机分布的。基于直觉，假设好和差的划分交替出现在树的各层上，并且好的划分是最好情况划分，而差的划分是最坏情况划分，图7-5(a)显示除了递归树的连续两层上的划分情况。 在一个差的划分后面接着一个好的划分，这种组合产生出三个子数组，大小分别为0、(n-1)/2-1和(n-1)/2。这一组合的划分代价为Θ(n)+Θ(n-1)=Θ(n)。该代价并不比图7-5(b)中的更差。在图7-5(b)中，一层划分就产生出大小为(n-1)/2的两个子数组，划分代价为Θ(n)。但是，后者的划分是平衡的。因此，当好和差的划分交替出现时，快速排序的时间复杂度与拳师号的划分时一样，仍然是O(nlgn)。区别只是O符号中隐含的常数因子要略大一些。 快速排序的随机化版本 如果采用一种称为随机抽样的随机化技术，可以使得分析变得更加简单。随机抽样是从子数组A[p…r]中随机选择一个元素作为主元。 首先将A[r]与从A[p…r]中随机选出的一个元素交换。通过对序列p,…,r的随机抽样，我们可以保证主元元素x=A[r]是等概率地从子数组的r-p+1个元素中选取的。因为主元元素是随机选取的，我们期望在平均情况下，对输入数组的划分是比较均衡的。 1RANDOMIZED-PARTITION(A,p,r) 123i = RANDOM(p,r)exchange A[r] with A[i]return PARTITION(A,p,r) 1RANDOMIZED-QUICKSORT(A,p,r) 1234if p &lt; r q = RANDOMIZED-PARTITION(A,p,r) RANDOMIZED-QUICKSORT(A,p,q-1) RANDOMIZED-QUICKSORT(A,q+1,r) 快速排序分析 最坏情况分析 期望运行时间","categories":[{"name":"算法","slug":"算法","permalink":"http://zydi.github.io/categories/算法/"}],"tags":[{"name":"算法导论","slug":"算法导论","permalink":"http://zydi.github.io/tags/算法导论/"}]},{"title":"《算法导论》第六章 堆排序","slug":"算法导论 第六章 堆排序","date":"2018-07-21T16:00:00.000Z","updated":"2018-08-05T07:43:07.289Z","comments":true,"path":"2018/07/22/算法导论 第六章 堆排序/","link":"","permalink":"http://zydi.github.io/2018/07/22/算法导论 第六章 堆排序/","excerpt":"《算法导论》第六章 堆排序","text":"《算法导论》第六章 堆排序 堆 1.（二叉)堆是一个数组，它可以被看成一个近似的完全二叉树，树上的每一个节点对应数组中的一个元素。除了最底层外，该树是完全充满的，而且是从左向右填充。 表示堆的数组A包括两个属性：A.length(通常)给出该数组元素的个数，A.heap-size表示有多少个堆元素存储在该数组中。 也就是说，虽然A[1…A.length]可能都存有数据，但只有A[1…A.heap-size]中存放的是堆的有效元素。 2.树的根结点是A[1] 给定一个结点的下标i，则父结点、左孩子和右孩子的下标： 123PARENT(i) return ⌊i/2⌋ 123LEFT(i) return 2i 123RIGHT(i) return 2i+1 3.最大堆:A[PARENT(i)]≥A[i]（某个结点的值至多与其父结点一样大） 最小堆:A[PARENT(i)]≤A[i]（最小元素存放在根结点中） 4.高度： 含有n个元素的堆的高度为⌊lgn⌋ 堆结构上的一些基本操作的运行时间至多是与树的高度成正比，为O(lgn)。 5.当用数组表示存储n个元素的堆时，叶结点下标分别是⌊n/2⌋+1，⌊n/2⌋+2，…，n。 维护堆的性质 MAX-HEAPIFY:通过让A[i]的值在最大堆中“逐级下降”，从而使得以下标i为根结点的子树重新遵循最大堆的性质，其时间复杂度为O(lgn)。 1234输入：数组A，下标i假设：根结点为LEFT(i)和RIGHT(i)的二叉树都是最大堆MAX-HEAPIFY(A,i) 12345678910l = LEFT(i)r = RIGHT(i)if l ≤ A.heap-size and A[l] &gt; A[i] largest = lelse largest = iif r ≤ A.heap-size and A[r] &gt; A[largest] largest = rif largest ≠ i exchange A[i] with A[largest] MAX-HEAPIFY(A,largest) 建堆 BUILD-MAX-HEAP:从无序的输入数据数组中构造一个最大堆。 1BUILD-MAX-HEAP(A) 123A.heap-size = A.lenghfor i = ⌊A.lengh/2⌋ downto 1 MAX-HEAPIFY(A,i) 堆排序算法 HEAPSORT:对一个数组进行原址排序，其时间复杂度为O(nlgn)。 初始时候，堆排序算法利用BUILD-MAX-HEAP将输入数组A[1…n]建成最大堆，其中n=A.lengh。因为数组中的最大元素总在根结点A[1]中，通过把它与A[n]进行互换，我们可以让该元素放到正确的位置。这时候，如果我们从堆中去掉结点n（这一操作可以通过减少A.heap-size的值来实现），剩余的结点中，原来根的孩子结点仍然是最大堆，而新的根结点可能会违背最大堆的性质。为了维护最大堆的性质，我们要做的是调用MAX-HEAPIFY（A，1），从而在A[1…n-1]上构造一个新的最大堆。堆排序算法会不断重复这一过程，直到堆的大小从n-1降到2. 1HEAPSORT(A) 12345BUILD-MAX-HEAP(A)for i = A.lengh downto 2 exchange A[1] with A[i] A.heap-size = A.heap-size - 1 MAX-HEAPIFY(A,1) 优先队列 1.优先队列是一种用来维护由一组元素构成的集合S的数据结构，其中的每一个元素都有一个相关的值，成为关键字。一个最大优先队列支持一下操作： INSERT(S,x):把元素x插入集合S中。这一操作等价于S=S∪{x}。 MAXIMUM(S):返回S中具有最大键字的元素。 EXTRACT-MAX(S):去掉并返回S中的具有最大键字的元素。 INCREASE-KEY(S,x,k):将元素x的关键字增加到k，这里假设k的值不小于x的原关键字值。 相应地，最小优先队列支持的操作包括INSERT、MINIMUM、EXTRACT、EXTRACT-MIN和DECREASE-KEY。 123HEAP-MAXIMUM(A)return A[1] 1HEAP-EXTRACT-MAX(A) 1234567if A.heap-size &lt; 1 error \"heap underflow\"max = A[1]A[1] = A[A.heap-size]A.heap-size = A.heap-size - 1MAZ-HEAPIFY(A,1)return max 1HEAP-INCREASE-KEY(A,i,key) 123456if key &lt; A[i] error \"new key is smaller than key\"A[i] = keywhile i &gt; 1 and A[PARENT(i)] &lt; A[i] exchange A[i] with A[PARENT(i)] i = PARENT(i) 1MAX-HEAP-INSERT(A,key) 123A.heap-size = A.heap-size + 1A[A.heap-size] = -∞HEAP-INCREASE-KEY(A,A.heap-size,key)","categories":[{"name":"算法","slug":"算法","permalink":"http://zydi.github.io/categories/算法/"}],"tags":[{"name":"算法导论","slug":"算法导论","permalink":"http://zydi.github.io/tags/算法导论/"}]}]}